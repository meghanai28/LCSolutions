/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        ArrayList <Node> que = new ArrayList<Node>();

        if(root == null)
        {
            return null;
        }

        que.add(root);

        while(!que.isEmpty())
        {
            int size = que.size();
            Node prev = null;

            for(int i =0; i< size; i++)
            {
                Node x = que.remove(0);
                x.next = prev;
                prev = x;

                if(x.right != null)
                {
                    que.add(x.right);
                }
                if(x.left!= null)
                {
                    que.add(x.left);
                }
            }
        }

        return root;
    }
}
