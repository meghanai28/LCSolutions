// AUTHOR: MEGHANA INDUKURI
class Solution {
    public int findKthLargest(int[] nums, int k) 
    {
        int s = nums.length - k + 1; // kth largest = sth smallest
        return quickSelect (nums, 0, nums.length-1, s);
    }

    private int quickPart (int [] nums, int low, int high)
    {
        int pivot = nums[high];
        int indexVal = low;
        
        for(int i = low; i< high; i++)
        {
            if(nums[i] < pivot)
            {
                int temp = nums[i];
                nums[i] = nums[indexVal];
                nums[indexVal] = temp;

                indexVal ++;
            }
        }

        int temp = nums[high];
        nums[high] = nums[indexVal];
        nums[indexVal] = temp;

        return indexVal;  
    }

    private int quickSelect (int [] nums, int low, int high, int k)
    {
            int indexVal = quickPart(nums, low, high);
            if (k == indexVal+1)
            {
                return nums[indexVal];
            }
            else if(k > indexVal+1)
            {
                return quickSelect(nums, indexVal+1, high, k);
            }
            else
            {
                return quickSelect(nums, low, indexVal-1, k);
            }
        
     }
}
